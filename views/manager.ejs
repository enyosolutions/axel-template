<!DOCTYPE html>
<html>
  <head>
    <title>Axel Management</title>
    <!-- needed for adaptive design -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/jquery-jsonview/1.2.3/jquery.jsonview.min.css"
    />

    <!-- Custom fonts for this template-->
    <link
      href="/axel-manager/vendor/fontawesome-free/css/all.min.css"
      rel="stylesheet"
      type="text/css"
    />
    <link
      href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
      rel="stylesheet"
    />

    <!-- Custom styles for this template-->
    <link href="/axel-manager/css/sb-admin-2.min.css" rel="stylesheet" />

    <!--
    ReDoc doesn't change outer page styles
    -->
    <style>
      body {
        margin: 0;
        padding: 0;
      }
    </style>
  </head>

  <body id="page-top">
    <div id="app">
      <!-- Page Wrapper -->
      <div id="wrapper">
        <!-- Sidebar -->
        <ul
          class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion"
          id="accordionSidebar"
        >
          <!-- Sidebar - Brand -->
          <a
            class="sidebar-brand d-flex align-items-center justify-content-center"
            href="index.html"
          >
            <div class="sidebar-brand-icon rotate-n-15">
              <img
                src="/axel-manager/img/axel.png"
                style="
    width: 49px;
    background: white;
    border-radius: 50%;
    "
                alt=""
              />
            </div>
            <div class="sidebar-brand-text mx-3">Axel framework</div>
          </a>

          <!-- Divider -->
          <hr class="sidebar-divider my-0" />

          <!-- Nav Item - Dashboard -->
          <li class="nav-item active">
            <a class="nav-link" href="index.html">
              <i class="fas fa-fw fa-tachometer-alt"></i>
              <span>Dashboard</span></a
            >
          </li>

          <!-- Divider -->
          <hr class="sidebar-divider" />

          <!-- Heading -->
          <div class="sidebar-heading">
            Debug
          </div>

          <!-- Nav Item - Pages Collapse Menu -->
          <li class="nav-item">
            <a
              class="nav-link collapsed"
              href="#"
              data-toggle="collapse"
              data-target="#collapseTwo"
              aria-expanded="true"
              aria-controls="collapseTwo"
            >
              <i class="fas fa-fw fa-cog"></i>
              <span>Admin</span>
            </a>
            <div
              id="collapseTwo"
              class="collapse"
              aria-labelledby="headingTwo"
              data-parent="#accordionSidebar"
            >
              <div class="bg-white py-2 collapse-inner rounded">
                <h6 class="collapse-header">Custom Components:</h6>
                <a class="collapse-item" href="buttons.html">Buttons</a>
                <a class="collapse-item" href="cards.html">Cards</a>
              </div>
            </div>
          </li>

          <!-- Divider -->
          <hr class="sidebar-divider" />

          <!-- Heading -->
          <div class="sidebar-heading">
            Api
          </div>

          <!-- Nav Item - Tables -->
          <li class="nav-item">
            <a class="nav-link" href="/documentation">
              <i class="fas fa-fw fa-table"></i>
              <span>Documentation</span></a
            >
          </li>

          <!-- Nav Item - Tables -->
          <li class="nav-item">
            <a class="nav-link" href="/console">
              <i class="fas fa-fw fa-table"></i>
              <span>Api console</span></a
            >
          </li>

          <!-- Nav Item - Tables -->
          <li class="nav-item">
            <a class="nav-link" href="/api/swagger.json">
              <i class="fas fa-fw fa-table"></i>
              <span>Swagger json</span></a
            >
          </li>

          <li class="nav-item">
            <a class="nav-link" href="/api/swagger.yml">
              <i class="fas fa-fw fa-table"></i>
              <span>Swagger yml</span></a
            >
          </li>

          <!-- Nav Item - Tables -->
          <li class="nav-item">
            <a class="nav-link" href="/admin">
              <i class="fas fa-fw fa-table"></i>
              <span>Admin</span></a
            >
          </li>

          <!-- Divider -->
          <hr class="sidebar-divider d-none d-md-block" />

          <!-- Sidebar Toggler (Sidebar) -->
          <div class="text-center d-none d-md-inline">
            <button class="rounded-circle border-0" id="sidebarToggle"></button>
          </div>
        </ul>
        <!-- End of Sidebar -->

        <!-- Content Wrapper -->
        <div id="content-wrapper" class="d-flex flex-column">
          <!-- Main Content -->
          <div id="content">
            <!-- Topbar -->
            <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">
              <!-- Sidebar Toggle (Topbar) -->
              <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
                <i class="fa fa-bars"></i>
              </button>

              <!-- Topbar Search -->
              <form
                class="d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search"
              >
                <div class="input-group">
                  <input
                    type="text"
                    class="form-control bg-light border-0 small"
                    placeholder="Search for..."
                    aria-label="Search"
                    aria-describedby="basic-addon2"
                  />
                  <div class="input-group-append">
                    <button class="btn btn-primary" type="button">
                      <i class="fas fa-search fa-sm"></i>
                    </button>
                  </div>
                </div>
              </form>

              <!-- Topbar Navbar -->
              <ul class="navbar-nav ml-auto">
                <!-- Nav Item - Search Dropdown (Visible Only XS) -->
                <li class="nav-item dropdown no-arrow d-sm-none">
                  <a
                    class="nav-link dropdown-toggle"
                    href="#"
                    id="searchDropdown"
                    role="button"
                    data-toggle="dropdown"
                    aria-haspopup="true"
                    aria-expanded="false"
                  >
                    <i class="fas fa-search fa-fw"></i>
                  </a>
                  <!-- Dropdown - Messages -->
                  <div
                    class="dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in"
                    aria-labelledby="searchDropdown"
                  >
                    <form class="form-inline mr-auto w-100 navbar-search">
                      <div class="input-group">
                        <input
                          type="text"
                          class="form-control bg-light border-0 small"
                          placeholder="Search for..."
                          aria-label="Search"
                          aria-describedby="basic-addon2"
                        />
                        <div class="input-group-append">
                          <button class="btn btn-primary" type="button">
                            <i class="fas fa-search fa-sm"></i>
                          </button>
                        </div>
                      </div>
                    </form>
                  </div>
                </li>

                <!-- Nav Item - Alerts -->
                <li class="nav-item no-arrow mx-1">
                  <a
                    class="nav-link"
                    :class="isConnected ? 'text-success' : 'text-danger'"
                    href="#"
                    id="alertsDropdown"
                    role="button"
                  >
                    <i class="fas fa-bell fa-fw"></i>
                    <span class="" v-if="!isConnected">Server is not connected</span>
                    <span class="" v-if="isConnected">Server is connected</span>
                    <!-- Counter - Alerts -->
                  </a>
                </li>

                <!-- Nav Item - Messages -->
                <li class="nav-item dropdown no-arrow mx-1">
                  <a
                    class="nav-link dropdown-toggle"
                    href="#"
                    id="messagesDropdown"
                    role="button"
                    data-toggle="dropdown"
                    aria-haspopup="true"
                    aria-expanded="false"
                  >
                    <i class="fas fa-envelope fa-fw"></i>
                    <!-- Counter - Messages -->
                    <span class="badge badge-danger badge-counter">7</span>
                  </a>
                  <!-- Dropdown - Messages -->
                  <div
                    class="dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in"
                    aria-labelledby="messagesDropdown"
                  >
                    <h6 class="dropdown-header">
                      Message Center
                    </h6>
                    <a class="dropdown-item d-flex align-items-center" href="#">
                      <div class="dropdown-list-image mr-3">
                        <img
                          class="rounded-circle"
                          src="https://source.unsplash.com/fn_BT9fwg_E/60x60"
                          alt=""
                        />
                        <div class="status-indicator bg-success"></div>
                      </div>
                      <div class="font-weight-bold">
                        <div class="text-truncate">
                          Hi there! I am wondering if you can help me with a problem I've been
                          having.
                        </div>
                        <div class="small text-gray-500">Emily Fowler · 58m</div>
                      </div>
                    </a>
                    <a class="dropdown-item d-flex align-items-center" href="#">
                      <div class="dropdown-list-image mr-3">
                        <img
                          class="rounded-circle"
                          src="https://source.unsplash.com/AU4VPcFN4LE/60x60"
                          alt=""
                        />
                        <div class="status-indicator"></div>
                      </div>
                      <div>
                        <div class="text-truncate">
                          I have the photos that you ordered last month, how would you like them
                          sent to you?
                        </div>
                        <div class="small text-gray-500">Jae Chun · 1d</div>
                      </div>
                    </a>
                    <a class="dropdown-item d-flex align-items-center" href="#">
                      <div class="dropdown-list-image mr-3">
                        <img
                          class="rounded-circle"
                          src="https://source.unsplash.com/CS2uCrpNzJY/60x60"
                          alt=""
                        />
                        <div class="status-indicator bg-warning"></div>
                      </div>
                      <div>
                        <div class="text-truncate">
                          Last month's report looks great, I am very happy with the progress so far,
                          keep up the good work!
                        </div>
                        <div class="small text-gray-500">Morgan Alvarez · 2d</div>
                      </div>
                    </a>
                    <a class="dropdown-item d-flex align-items-center" href="#">
                      <div class="dropdown-list-image mr-3">
                        <img
                          class="rounded-circle"
                          src="https://source.unsplash.com/Mv9hjnEUHR4/60x60"
                          alt=""
                        />
                        <div class="status-indicator bg-success"></div>
                      </div>
                      <div>
                        <div class="text-truncate">
                          Am I a good boy? The reason I ask is because someone told me that people
                          say this to all dogs, even if they aren't good...
                        </div>
                        <div class="small text-gray-500">
                          Chicken the Dog · 2w
                        </div>
                      </div>
                    </a>
                    <a class="dropdown-item text-center small text-gray-500" href="#"
                      >Read More Messages</a
                    >
                  </div>
                </li>

                <div class="topbar-divider d-none d-sm-block"></div>

                <!-- Nav Item - User Information -->
                <!--
              <li class="nav-item dropdown no-arrow">
                <a
                  class="nav-link dropdown-toggle"
                  href="#"
                  id="userDropdown"
                  role="button"
                  data-toggle="dropdown"
                  aria-haspopup="true"
                  aria-expanded="false"
                >
                  <span class="mr-2 d-none d-lg-inline text-gray-600 small"
                    >Valerie Luna</span
                  >
                  <img
                    class="img-profile rounded-circle"
                    src="https://source.unsplash.com/QAB-WJcbgJk/60x60"
                  />
                </a>
                <!-- Dropdown - User Information -->
                <!--
                <div
                  class="dropdown-menu dropdown-menu-right shadow animated--grow-in"
                  aria-labelledby="userDropdown"
                >
                  <a class="dropdown-item" href="#">
                    <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                    Profile
                  </a>
                  <a class="dropdown-item" href="#">
                    <i class="fas fa-cogs fa-sm fa-fw mr-2 text-gray-400"></i>
                    Settings
                  </a>
                  <a class="dropdown-item" href="#">
                    <i class="fas fa-list fa-sm fa-fw mr-2 text-gray-400"></i>
                    Activity Log
                  </a>
                  <div class="dropdown-divider"></div>
                  <a
                    class="dropdown-item"
                    href="#"
                    data-toggle="modal"
                    data-target="#logoutModal"
                  >
                    <i
                      class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"
                    ></i>
                    Logout
                  </a>
                </div>
              </li>
              --></ul>
            </nav>
            <!-- End of Topbar -->

            <!-- Begin Page Content -->
            <div class="container-fluid">
              <!-- Page Heading -->
              <div class="d-sm-flex align-items-center justify-content-between mb-4">
                <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
                <a
                  href="#"
                  class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"
                  data-toggle="modal"
                  data-target="#newApiModal"
                  ><i class="fas fa-plus fa-sm text-white-50"></i> New Api</a
                >
              </div>

              <!-- Content Row -->
              <div class="row">


                <div class="col-4 col-xs-12">
                  <div class="card shadow mb-4">
                    <div
                      class="card-header py-3 d-flex flex-row align-items-center justify-content-between"
                    >
                      <h6 class="m-0 font-weight-bold text-primary">
                        Models <span class="badge badge-primary">{{ models.length }}</span>
                      </h6>

                      <div class="btn-group float-right ">
                        <button class="btn btn-link mr-2" @click="listModels()">
                          <i class="fa fa-sync"></i>
                        </button>
                        <button class="btn btn-link p-0" @click="createModel()">
                          <i class="fa fa-plus"></i>
                        </button>
                      </div>
                    </div>
                    <div class="card-body p-2 ">
                      <table class="table table-bordered" id="dataTable" cellspacing="0">
                        <thead>
                          <tr>
                            <td>
                              <span class="text-secondary">ALL</span>
                              <div class="float-right">
                                <button class="btn btn-primary badge" @click="syncModel('$ALL')">
                                  sync
                                </button>
                                <button
                                  class="btn btn-secondary badge "
                                  @click="syncModel('$ALL', {force: true, alter: true})"
                                >
                                  Drop and sync
                                </button>
                              </div>
                            </td>
                          </tr>
                        </thead>
                        <tbody>
                          <tr v-for="model in models">
                            <td>
                              {{ model }}
                              <div class="float-right">
                                <button class="btn btn-primary badge" @click="syncModel(model)">
                                  sync
                                </button>
                                <button
                                  class="btn btn-secondary badge "
                                  @click="syncModel(model, {force: true, alter: true})"
                                >
                                  Drop and sync
                                </button>
                              </div>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>

                <div class="col-4 col-xs-12">
                  <div class="card shadow mb-4">
                    <div
                      class="card-header py-3 d-flex flex-row align-items-center justify-content-between"
                    >
                      <h6 class="m-0 font-weight-bold text-primary">
                        Controllers
                      </h6>
                      <div class="btn-group float-right ">
                        <button class="btn btn-link mr-2" @click="listControllers()">
                          <i class="fa fa-sync"></i>
                        </button>
                        <button class="btn btn-link p-0" @click="createController()">
                          <i class="fa fa-plus"></i>
                        </button>
                      </div>
                    </div>
                    <div class="card-body p-2 ">
                      <table class="table table-bordered" id="dataTable" cellspacing="0">
                        <thead>
                          <tr></tr>
                        </thead>

                        <tbody>
                          <tr v-for="(controller, id) in controllers">
                            <td>{{ id }}</td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>


                 <div class="col-4">
                  <div class="card shadow mb-4">
                    <div
                      class="card-header py-3 d-flex flex-row align-items-center justify-content-between"
                    >
                      <h6 class="m-0 font-weight-bold text-primary">
                        Routes
                      </h6>
                      <div class="float-right">
                        <button class="btn btn-link p-0" @click="listRoutes()">
                          <i class="fa fa-sync"></i>
                        </button>
                        <button class="btn btn-link p-0" @click="createRoute()">
                          <i class="fa fa-plus"></i>
                        </button>
                      </div>
                    </div>
                    <div class="card-body p-2 table-responsive">
                      <table class="table table-bordered" id="dataTable" cellspacing="0">
                        <thead>
                          <tr>
                            <th>Route</th>
                            <th>Target</th>
                          </tr>
                        </thead>

                        <tbody style="max-height:50vh; overflow: auto">
                          <% for (const route in axel.config.routes) { %>
                          <tr>
                            <td style="width: 40%;"><%= route %></td>
                            <td>
                              <pre><%= JSON.stringify(axel.config.routes[route], null, 2) %></pre>
                            </td>
                          </tr>
                          <% } %>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>

              <div class="row">

              <!-- Content Row -->
              <div class="row">
                <div class="col-12">
                  <div class="card shadow mb-4">
                    <div
                      class="card-header py-3 d-flex flex-row align-items-center justify-content-between"
                    >
                      <h6 class="m-0 font-weight-bold text-primary">
                        Raw
                      </h6>
                    </div>
                    <div class="card-body">
                      <pre id="jstree"></pre>
                    </div>
                  </div>
                </div>
              </div>


              </div>
            </div>
            <!-- /.container-fluid -->
          </div>
          <!-- End of Main Content -->

          <!-- Footer -->
          <footer class="sticky-footer bg-white">
            <div class="container my-auto">
              <div class="copyright text-center my-auto">
                <span>Copyright &copy; axel 2020 with SB ADMIN 2</span>
              </div>
            </div>
          </footer>
          <!-- End of Footer -->
        </div>
        <!-- End of Content Wrapper -->
      </div>
      <!-- End of Page Wrapper -->

      <!-- Scroll to Top Button-->
      <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
      </a>

      <!-- Logout Modal-->
      <div
        class="modal fade"
        id="newApiModal"
        tabindex="-1"
        role="dialog"
        aria-labelledby="exampleModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">Create new api</h5>
              <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">×</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="form-group">
                <label> Api name</label>
                <input
                  v-model="newApi.name"
                  type="text"
                  class="form-control"
                  placeholder="Api name"
                />
              </div>
              <div class="form-group">
                <label> DB type</label>
                <select
                  v-model="newApi.type"
                  type="text"
                  class="form-control"
                  placeholder="Api type"
                >
                  <option disabled selected>Api type</option>
                  <option value="sql">Sql</option>
                  <option value="mongo">Mongo</option>
                </select>
              </div>
              <div class="form-check" v-if="newApi.type=='sql'">
                <label class="form-check-label"> Also generate Schema ?</label>
                <input
                  v-model="newApi.withSchema"
                  type="checkbox"
                  class="form-check-input"
                  placeholder="Api type"
                />
              </div>
              <hr />
              <div class="form-group">
                <table class="table table-bordered" id="dataTable" cellspacing="0">
                  <thead>
                    <tr>
                      Fields

                      <div class="float-right">
                        <button class="btn btn-link p-0" @click="addField()">
                          <i class="fa fa-plus"></i>
                        </button>
                      </div>
                    </tr>
                  </thead>

                  <tbody>
                    <tr v-for="field in newApi.fields">
                      <td>
                        <input
                          v-model="field.name"
                          type="text"
                          class="form-control"
                          placeholder="Field name"
                        />
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
            <div class="modal-footer">
              <button class="btn btn-secondary" type="button" data-dismiss="modal">
                Cancel
              </button>
              <button
                class="btn btn-primary"
                @click="createApi"
                :disabled="!newApi || !newApi.name || !newApi.type"
              >
                Create
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <ul id="events"></ul>
    <script src="/axel-manager/js/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

    <!-- Bootstrap core JavaScript-->
    <script src="/axel-manager/vendor/jquery/jquery.min.js"></script>
    <script src="/axel-manager/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <!-- Core plugin JavaScript-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-jsonview/1.2.3/jquery.jsonview.js"></script>
    <script src="/axel-manager/vendor/jquery-easing/jquery.easing.min.js"></script>

    <!-- Custom scripts for all pages-->
    <script src="/axel-manager/js/sb-admin-2.min.js"></script>

    <!-- Page level plugins -->
    <script src="/axel-manager/vendor/chart.js/Chart.min.js"></script>

    <!-- Page level custom scripts -->
    <script src="/axel-manager/js/demo/chart-area-demo.js"></script>
    <script src="/axel-manager/js/demo/chart-pie-demo.js"></script>
    <script src="/axel-manager/js/vue/vue.js"></script>
    <script src="/axel-manager/js/axios.min.js"></script>

    <script>
              $(function () {
                $('#jstree').JSONView(
                  {
                    config: <%- JSON.stringify(axel.config) %>,
                    routes: <%- JSON.stringify(axel.config.routes || {}) %>,
                    controllers: <%- JSON.stringify(axel.controllers) %>,
                  }
              , {collapsed: true});
            });
            window.App  = window.App  || {};
            const Swal2 = Swal.mixin({
                      customClass: {
                        confirmButton: 'btn btn-primary ml-1',
                        cancelButton: 'btn btn-danger btn-light'
                      },
                      buttonsStyling: false,
                      reverseButtons: true
      })
    </script>
    <script>
           Vue.prototype.$http = axios.create({
             baseURL: '/',
             timeout: 20000,
             headers: {
               Accept: 'application/json',
               'Content-Type': 'application/json',
               //    Authorization: `Bearer ${localStorage.getItem(`${config.appName}_token`)}`,
             },
           });
           window.socket = io();
           socket._call = function (method, event, options) {
              const that = this;
             return new Promise((resolve, reject) => {
              if (!that) {
                  reject('No socket connection.');
              } else {
                  that.socket.emit(event, {...options, method}, (err, data) => {
                    console.log(err, data)
                      if (err) {
                          console.error(err);
                          reject(err);
                      } else {
                          resolve(data);
                      }
                  });
              }
          });
           }

           socket.get = socket._call.bind(undefined, 'GET');
           socket.post = socket._call.bind(undefined, 'POST');
           socket.put = socket._call.bind(undefined, 'PUT');
           socket.delete = socket._call.bind(undefined, 'DELETE');
           Vue.prototype.$socket = socket;
           App.vue = new Vue({
             el: '#app',

             data: {
               message: 'Hello Vue !',
               controllers: <%- JSON.stringify(axel.controllers) %>,
               models: [],
               socket: socket,
               blockingModal: null,
               newApi: {
                 name: '',
                 type: null,
                 withSchema: false,
                 fields:[]
               },
               newApiTemplate: {
                 name: '',
                 type: null,
                 withSchema: false,
                 fields:[]
               }
             },
             mounted() {
               this.$socket.on('connect', (a) => {
                 this.refreshLists();
               });

               this.$socket.on('disconnect', (a) => {
                 console.log(a); // false
               });

               this.$socket.on('hello', (second) => {
               console.log('second', second);
             });
             },
             computed: {
               isConnected() {
                 return this.socket && this.socket.connected
               }
             },
             watch: {
               'socket.connected': (newVal, oldVal) => {
                 console.log('newVal', newVal, 'oldVal', oldVal);
                 if (!newVal && oldVal !== newVal) {
                   this.blockingModal = Swal2.fire({
                     html: "<h3>Server is disconnected</h3><br><img src='/img/loader-1.gif' />",
                     showCancelButton: false,
                     showConfirmButton: false,
                     showCloseButton: false,
                     allowOutsideClick: false,
                     allowEscapeKey: false,
                   });
                 }
                 else if (this.blockingModal) {
                   this.blockingModal.close();
                   this.refreshLists();
                 }
               }
             },
             methods: {
               $notify(text, type) {
                return Swal2.fire({title: text,
                icon: type || 'info', toast: true, position: 'top-end',
                 showConfirmButton: false,
                 timer: 3000,
              });
               },
               refreshLists() {
                 this.listControllers();
                 this.listModels();
                 this.listRoutes();
               },

               addField() {
                this.newApi.fields.push({});
               },

               async listControllers() {
                 this.$socket.emit('/axel-manager/controllers', (err, data) => {
                     if (err) {
                       console.warn(err.message);
                       return;
                     }
                     console.log( this.controllers)
                     this.controllers = data.body
                 });
               },
               async listModels() {
                 this.models = [];
                 this.$socket.get('/axel-manager/models')
                 .then(data => {
                     this.models = data.body && data.body.models
                     this.tables = data.body && data.body.tables
                 })
                 .catch(err => {
                  console.warn(err.message);
                 });
               },
               async listRoutes() {
                 this.routes = [];
                 this.$socket.get('/axel-manager/routes')
                 .then(data => {
                     this.routes = data.body && data.body.routes
                 })
                 .catch(err => {
                  console.warn(err.message);
                 });
               },
               async syncModel(modelName, options = {alter: true}) {
                 const {force, alter} = options;
                 this.$socket.emit('/axel-manager/models/sync',{method: 'POST', body: {id: modelName, force, alter}}, (err, data) => {
                     if (err) {
                       console.warn(err);
                       this.$notify(`Error while updating Model ${modelName} [${err.message || err}]`, 'error');
                       return;
                     }
                     this.$notify(`Model ${modelName} was updated`, 'success');
                     this.listModels();
                 });
               },
               async createController() {
                 const values = await Swal2.fire({
                   title: 'Create a new controller',
                   html: `
                     <input id="swal-name" class="swal2-input" placeholder="Name">
                     <select id="swal-type" class="swal2-input" placeholder="type">
                       <option selected>bare</option>
                       <option>sql</option>
                       <option disabled>mongo</option>
                     </select>
                       <label>
                     <input id="swal-force" type="checkbox" class="swal2-checkbox" placeholder="force" value="true">
                     Force
                     </label>
                     `,
                   focusConfirm: false,
                   showCancelButton: true,
                   reverseButtons: true,
                   preConfirm: () => {
                     let values = [
                       document.getElementById('swal-name').value,
                       document.getElementById('swal-type').value,
                       document.getElementById('swal-force').value == 'true',
                     ];
                     values = values.filter(v => v);
                     if (values.length < 3) {
                       return Swal2.fire({title: 'Please fill in all the data', icon: 'error'});
                     }
                     if (values[2] == 'true') {
                       values[2] = true;
                     }
                     return values;
                   },

                 });
                 console.log("values", values)
                 this.$http.post('/api/axel-manager/controllers', {name: values.value[0], type: values.value[1], force: values.value[2]})
                 .then(() => {
                   return Swal2.fire({title: 'Controller successfully created', icon: 'success'});
                 })
                 .catch(err => {
                   return Swal2.fire({title: err.message, icon: 'error'});
                 })
               },



               async createModel() {
                 const values = await Swal2.fire({
                   title: 'Create a new controller',
                   html: `
                     <input id="swal-name" class="swal2-input" placeholder="Name">
                     <select id="swal-type" class="swal2-input" placeholder="type">
                       <option selected>bare</option>
                       <option>sql</option>
                       <option disabled>mongo</option>
                     </select>
                       <label>
                     <input id="swal-force" type="checkbox" class="swal2-checkbox" placeholder="force" value="true">
                     Force
                     </label>
                     `,
                   focusConfirm: false,
                   showCancelButton: true,
                   reverseButtons: true,
                   preConfirm: () => {
                     let values = [
                       document.getElementById('swal-name').value,
                       document.getElementById('swal-type').value,
                       document.getElementById('swal-force').value == 'true',
                     ];
                     values = values.filter(v => v);
                     if (values.length < 3) {
                       return Swal2.fire({title: 'Please fill in all the data', icon: 'error'});
                     }
                     if (values[2] == 'true') {
                       values[2] = true;
                     }
                     return values;
                   },

                 });
                 console.log("values", values)
                 this.$http.post('/api/axel-manager/controllers', {name: values.value[0], type: values.value[1], force: values.value[2]})
                 .then(() => {
                   return Swal2.fire({title: 'Controller successfully created', icon: 'success'});
                 })
                 .catch(err => {
                   return Swal2.fire({title: err.message, icon: 'error'});
                 })
               },


               async createRoute() {
                 const values = await Swal2.fire({
                   title: 'Create a new route',
                   html: `
                     <input id="swal-name" class="swal2-input" placeholder="Name">
                    `,
                   focusConfirm: false,
                   showCancelButton: true,
                   reverseButtons: true,
                   preConfirm: () => {
                     let values = [
                       document.getElementById('swal-name').value,
                     ];
                     values = values.filter(v => v);
                     if (values.length < 1) {
                       return Swal2.fire({title: 'Please fill in all the data', icon: 'error'});
                     }
                     if (values[2] == 'true') {
                       values[2] = true;
                     }
                     return values;
                   },

                 });
                 this.$socket.post('/axel-manager/routes', {body: {name: values.value[0]}})
                 .then(() => {
                   return Swal2.fire({title: 'Route successfully created', icon: 'success', toast: true});
                 })
                 .catch(err => {
                   return Swal2.fire({title: err.message, icon: 'error'});
                 })
               },




               async createApi() {

                 if (!this.newApi.name) {
                   Swal2.fire({title: 'Missing api name', toast: true});
                   return;
                 }
                 if (!this.newApi.type) {
                   Swal2.fire({title: 'Missing api type', toast: true});
                   return;
                 }
                 this.$socket.post('/axel-manager/api', {body: {...this.newApi}})
                 .then(() => {
                   this.newApi = Object.assign({}, this.newApiTemplate);
                   return Swal2.fire({title: 'Api successfully created', icon: 'success', toast: true});

                 })
                 .catch(err => {
                   return Swal2.fire({title: err.message, icon: 'error'});
                 })
               },



             },
           });


             socket.on('hello', (second) => {
               console.log('second', second);
             });
    </script>
  </body>
</html>
